// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	sync "sync"

	store "github.com/bigflood/gostudy/todo/store"
)

type File struct {
	ReadAllStub        func() ([]byte, error)
	readAllMutex       sync.RWMutex
	readAllArgsForCall []struct {
	}
	readAllReturns struct {
		result1 []byte
		result2 error
	}
	readAllReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	WriteAllStub        func([]byte) error
	writeAllMutex       sync.RWMutex
	writeAllArgsForCall []struct {
		arg1 []byte
	}
	writeAllReturns struct {
		result1 error
	}
	writeAllReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *File) ReadAll() ([]byte, error) {
	fake.readAllMutex.Lock()
	ret, specificReturn := fake.readAllReturnsOnCall[len(fake.readAllArgsForCall)]
	fake.readAllArgsForCall = append(fake.readAllArgsForCall, struct {
	}{})
	fake.recordInvocation("ReadAll", []interface{}{})
	fake.readAllMutex.Unlock()
	if fake.ReadAllStub != nil {
		return fake.ReadAllStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readAllReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *File) ReadAllCallCount() int {
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	return len(fake.readAllArgsForCall)
}

func (fake *File) ReadAllCalls(stub func() ([]byte, error)) {
	fake.readAllMutex.Lock()
	defer fake.readAllMutex.Unlock()
	fake.ReadAllStub = stub
}

func (fake *File) ReadAllReturns(result1 []byte, result2 error) {
	fake.readAllMutex.Lock()
	defer fake.readAllMutex.Unlock()
	fake.ReadAllStub = nil
	fake.readAllReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *File) ReadAllReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readAllMutex.Lock()
	defer fake.readAllMutex.Unlock()
	fake.ReadAllStub = nil
	if fake.readAllReturnsOnCall == nil {
		fake.readAllReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readAllReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *File) WriteAll(arg1 []byte) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.writeAllMutex.Lock()
	ret, specificReturn := fake.writeAllReturnsOnCall[len(fake.writeAllArgsForCall)]
	fake.writeAllArgsForCall = append(fake.writeAllArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("WriteAll", []interface{}{arg1Copy})
	fake.writeAllMutex.Unlock()
	if fake.WriteAllStub != nil {
		return fake.WriteAllStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.writeAllReturns
	return fakeReturns.result1
}

func (fake *File) WriteAllCallCount() int {
	fake.writeAllMutex.RLock()
	defer fake.writeAllMutex.RUnlock()
	return len(fake.writeAllArgsForCall)
}

func (fake *File) WriteAllCalls(stub func([]byte) error) {
	fake.writeAllMutex.Lock()
	defer fake.writeAllMutex.Unlock()
	fake.WriteAllStub = stub
}

func (fake *File) WriteAllArgsForCall(i int) []byte {
	fake.writeAllMutex.RLock()
	defer fake.writeAllMutex.RUnlock()
	argsForCall := fake.writeAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *File) WriteAllReturns(result1 error) {
	fake.writeAllMutex.Lock()
	defer fake.writeAllMutex.Unlock()
	fake.WriteAllStub = nil
	fake.writeAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *File) WriteAllReturnsOnCall(i int, result1 error) {
	fake.writeAllMutex.Lock()
	defer fake.writeAllMutex.Unlock()
	fake.WriteAllStub = nil
	if fake.writeAllReturnsOnCall == nil {
		fake.writeAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *File) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	fake.writeAllMutex.RLock()
	defer fake.writeAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *File) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.DataSource = new(File)
